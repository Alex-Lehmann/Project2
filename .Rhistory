system("./SetGit.sh")
# Load data from store
## View your working directory
getwd()
## Read in the idioms from file
storeIdioms <- readRDS("idiomsRead.rds")
## Clean the idiom list
for(currentLetter in 1:length(storeIdioms)) {
storeIdioms[[currentLetter]]$expression <- tolower(storeIdioms[[currentLetter]]$expression)
storeIdioms[[currentLetter]]$expression <- str_replace_all(storeIdioms[[currentLetter]]$expression, pattern = " \\(.*?\\)", "")
storeIdioms[[currentLetter]]$definition <- tolower(storeIdioms[[currentLetter]]$definition)
}
library(rvest)
library(stringr)
library(tidyverse)
library(sentimentr)
## Clean the idiom list
for(currentLetter in 1:length(storeIdioms)) {
storeIdioms[[currentLetter]]$expression <- tolower(storeIdioms[[currentLetter]]$expression)
storeIdioms[[currentLetter]]$expression <- str_replace_all(storeIdioms[[currentLetter]]$expression, pattern = " \\(.*?\\)", "")
storeIdioms[[currentLetter]]$definition <- tolower(storeIdioms[[currentLetter]]$definition)
}
# Sentiment Analysis
## Initialize for sentiment analysis
#install.packages("sentimentr")
library(sentimentr)
## Process sentiment
### Create sentiment store tibble
sTibble <- data.frame(expression = c(), word_count = c(), sd = c(),
ave_sentiment = c())
### Process sentiments
for(sTibbleIndex in 1:length(storeIdioms)) {
storeIdioms[[sTibbleIndex]] %>%
get_sentences() %>%
sentiment_by(., by = "expression") %>%
rbind(sTibble,.) -> sTibble
}
### Create sentiment tibble with average results
rsTibble <- tibble(expression = sTibble$expression,
sentimentF = sTibble$ave_sentiment)
### Norm the sentiments
maxSrst <- max(rsTibble$sentimentF)
minSrst <- min(rsTibble$sentimentF)
rsTibble$sentimentF[rsTibble$sentimentF > 0] <-
round(4 * rsTibble$sentimentF[rsTibble$sentimentF > 0] / maxSrst) / 4
rsTibble$sentimentF[rsTibble$sentimentF < 0] <-
round(4 * rsTibble$sentimentF[rsTibble$sentimentF < 0] / minSrst) / -4
sentimentrTibble <- rsTibble[!duplicated(rsTibble$expression),]
sentimentrTibble
# Emotional Analysis
aTibble <- data.frame()
## For emotional processing we merge the definition and expression
for(aTibbleIndex in 1:length(storeIdioms)) {
aTibble <- rbind(aTibble,
tibble(expression = storeIdioms[[aTibbleIndex]]$expression,
defEx = paste(storeIdioms[[aTibbleIndex]]$expression,
storeIdioms[[aTibbleIndex]]$definition,
sep = ", ")))
}
## We will get the sentences for emotional processing but will amalgamate sentences first to avoid multiple entries
emotionsTibble <- emotion(get_sentences(gsub("\\!",";",gsub("\\.",";",aTibble$defEx,))))
## Separate emotional declarations into logical vectors
emotionsNoted <- c("anger", "anger_negated", "anticipation", "anticipation_negated",
"disgust", "disgust_negated", "fear", "fear_negated",
"joy", "joy_negated", "sadness", "sadness_negated",
"surprise", "surprise_negated", "trust", "trust_negated")
anger = emotionsTibble$emotion_type == emotionsNoted[1]
anger_negated = emotionsTibble$emotion_type == emotionsNoted[2]
anticipation = emotionsTibble$emotion_type == emotionsNoted[3]
anticipation_negated = emotionsTibble$emotion_type == emotionsNoted[4]
disgust = emotionsTibble$emotion_type == emotionsNoted[5]
disgust_negated = emotionsTibble$emotion_type == emotionsNoted[6]
fear = emotionsTibble$emotion_type == emotionsNoted[7]
fear_negated = emotionsTibble$emotion_type == emotionsNoted[8]
joy = emotionsTibble$emotion_type == emotionsNoted[9]
joy_negated = emotionsTibble$emotion_type == emotionsNoted[10]
sadness = emotionsTibble$emotion_type == emotionsNoted[11]
sadness_negated = emotionsTibble$emotion_type == emotionsNoted[12]
surprise = emotionsTibble$emotion_type == emotionsNoted[13]
surprise_negated = emotionsTibble$emotion_type == emotionsNoted[14]
trust = emotionsTibble$emotion_type == emotionsNoted[15]
trust_negated = emotionsTibble$emotion_type == emotionsNoted[16]
## Create and emotions logic frame
emotionsLogic <- data.frame(
anger,
anger_negated,
anticipation,
anticipation_negated,
disgust,
disgust_negated,
fear,
fear_negated,
joy,
joy_negated,
sadness,
sadness_negated,
surprise,
surprise_negated,
trust,
trust_negated
)
## Combine the emotions into their original categories by collapsing negations and finding maximal emotional hits
strictEmotionsNoted <- c("anger", "anticipation",
"disgust", "fear",
"joy", "sadness",
"surprise", "trust")
emotionsSelectIndex <- 1:length(strictEmotionsNoted)
token <- c()
d <- c()
for(elementIndex in 1:max(emotionsTibble$element_id)){
overarchingLogic <- (emotionsTibble$element_id == elementIndex)
currentAnger <- emotionsTibble$emotion[overarchingLogic&emotionsLogic$anger] -
emotionsTibble$emotion[overarchingLogic&emotionsLogic$anger_negated]
currentAnticipation <- emotionsTibble$emotion[overarchingLogic&emotionsLogic$anticipation] -
emotionsTibble$emotion[overarchingLogic&emotionsLogic$anticipation_negated]
currentDisgust <- emotionsTibble$emotion[overarchingLogic&emotionsLogic$disgust] -
emotionsTibble$emotion[overarchingLogic&emotionsLogic$disgust_negated]
currentFear <- emotionsTibble$emotion[overarchingLogic&emotionsLogic$fear] -
emotionsTibble$emotion[overarchingLogic&emotionsLogic$fear_negated]
currentJoy <- emotionsTibble$emotion[overarchingLogic&emotionsLogic$joy] -
emotionsTibble$emotion[overarchingLogic&emotionsLogic$joy_negated]
currentSadness <- emotionsTibble$emotion[overarchingLogic&emotionsLogic$sadness] -
emotionsTibble$emotion[overarchingLogic&emotionsLogic$sadness_negated]
currentSurprise <- emotionsTibble$emotion[overarchingLogic&emotionsLogic$surprise] -
emotionsTibble$emotion[overarchingLogic&emotionsLogic$surprise_negated]
currentTrust <- emotionsTibble$emotion[overarchingLogic&emotionsLogic$trust] -
emotionsTibble$emotion[overarchingLogic&emotionsLogic$trust_negated]
currentVector <- c(currentAnger, currentAnticipation, currentDisgust, currentFear,
currentJoy, currentSadness, currentSurprise, currentTrust)
currentMax <- max(currentVector)
length(emotionsSelectIndex[currentVector==currentMax])
if(currentMax > 0){
token <- c(token,rep(aTibble$expression[elementIndex],
sum(currentVector==currentMax)))
d <- c(d, strictEmotionsNoted[emotionsSelectIndex[currentVector==currentMax]])
} else {
token <- c(token, aTibble$expression[elementIndex])
d <- c(d, "")
}
}
## Creat summary emotial table
#lexicon::hash_nrc_emotions
overallEmotionTibble <- tibble(token,
emotion = d)
finalEmotionTibble <- overallEmotionTibble[!duplicated(paste(overallEmotionTibble$token, overallEmotionTibble$emotion)),]
## View
View(finalEmotionTibble)
shiny::runApp('dataVisualization')
runApp('dataVisualization')
runApp('dataVisualization')
storeIdioms
